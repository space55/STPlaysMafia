package player;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

import javax.management.relation.Role;

/*******************************************************************************
 * Copyright (C) Eamonn Nugent - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Eamonn Nugent <elg.nugent@gmail.com>, 2016
 *******************************************************************************/

public class Player implements Runnable
{
	private Socket s;
	private Role role;
	private boolean alive;
	private String username;

	private PrintWriter out;
	private BufferedReader in;

	private Thread t;

	public Player(Socket s)
	{
		this.s = s;
		init();
	}

	public void init()
	{
		t = new Thread(this);
		t.start();
		try
		{
			out = new PrintWriter(s.getOutputStream());
			in = new BufferedReader(new InputStreamReader(s.getInputStream()));
		}
		catch (IOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void send(String s)
	{
		out.println(s);
		out.flush();
	}

	public String read()
	{
		try
		{
			return in.readLine();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public void run()
	{
		// TODO Auto-generated method stub
		while (true)
		{
			String temp = read();
			if (temp != null && !temp.equals(""))
			{
				Interpret.run(temp, this);
			}

		}
	}

	public Role getRole()
	{
		return role;
	}

	public String getUsername()
	{
		return username;
	}

	public boolean alive()
	{
		return alive;
	}

	public void sendRole()
	{
		send("ROLE " + role.toString());
	}
}
