package player;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

/*******************************************************************************
 * Copyright (C) Eamonn Nugent - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Eamonn Nugent <elg.nugent@gmail.com>, 2016
 *******************************************************************************/

public class Player implements Runnable
{
	private Socket s;
	private Role role;
	private boolean alive = true;
	private String username;
	private boolean invuln = false;
	private boolean toDie = false;
	
	private int votes;

	private PrintWriter out;
	private BufferedReader in;

	private Thread t;

	public Player(Socket s)
	{
		this.s = s;
		init();
	}

	public void init()
	{
		t = new Thread(this);
		t.start();
		try
		{
			out = new PrintWriter(s.getOutputStream());
			in = new BufferedReader(new InputStreamReader(s.getInputStream()));
		}
		catch (IOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void send(String s)
	{
		out.println(s);
		out.flush();
	}

	public String read()
	{
		try
		{
			return in.readLine();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public void run()
	{
		// TODO Auto-generated method stub
		while (true)
		{
			String temp = read();
			if (temp != null && !temp.equals(""))
			{
				Interpret.run(temp, this);
			}

		}
	}
	
	public void night()
	{
		if (role == Role.MAFIA)
		{
			send("WHOKILL");
		}
	}

	public void day()
	{
		if (toDie)
		{
			if (!invuln)
			{
				kill();
			}
		}
		invuln = false;
		toDie = !alive;
	}

	public Role getRole()
	{
		return role;
	}

	public void setRole(Role role)
	{
		this.role = role;
	}

	public String getUsername()
	{
		return username;
	}

	public boolean alive()
	{
		return alive;
	}

	public void setUsername(String u)
	{
		username = u;
	}

	public void sendRole()
	{
		send("ROLE " + role.toString());
	}
	
	public void addVote()
	{
		votes++;
	}
	
	public void removeVote()
	{
		votes--;
	}

	public void kill()
	{
		toDie = false;
		send("KILLED");
	}

	public void forceKill()
	{
		toDie = true;
	}

	public void performAction(Role role, Player parent)
	{
		switch (role)
		{
		case MAFIA:
			kill();
			break;
		case SERIAL_KILLER:
			kill();
			break;
		case DOCTOR:
			invuln = true;
			break;
		case INVESTIGATOR:
			parent.send("INVESTIGATED " + username + " "
					+ (this.role == Role.MAFIA || this.role == Role.SERIAL_KILLER ? "TRUE" : "FALSE"));
		case OLD_MAN:
			kill();
			int temp = PlayerManager.indexOf(this);
			int s = PlayerManager.players.size() - 1;
			PlayerManager.get((temp != s) ? temp + 1 : 0).kill();
			PlayerManager.get((temp != 0) ? temp - 1 : s).kill();
		default:
			break;

		}
	}
}
